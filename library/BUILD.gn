# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/flutter.gni")
import("//build/packaging.gni")
import("//library/engine.gni")

published_shared_library("flutter_embedder") {
  # GLFW embedding implementation.
  if (is_linux || is_win) {
    public = [
      "include/flutter_desktop_embedding/glfw/embedder.h",
      "include/flutter_desktop_embedding/glfw/flutter_window_controller.h",
    ]
    sources = [
      "common/glfw/embedder.cc",
      "common/glfw/flutter_window_controller.cc",
      "common/glfw/key_event_handler.cc",
      "common/glfw/key_event_handler.h",
      "common/glfw/keyboard_hook_handler.h",
      "common/glfw/text_input_plugin.cc",
      "common/glfw/text_input_plugin.h",
    ]
  }

  # Embedding-agnostic shared C++.
  if (is_linux || is_win) {
    sources += [
      "common/engine_method_result.cc",
      "common/internal/plugin_handler.cc",
      "common/internal/plugin_handler.h",
      "common/internal/text_input_model.cc",
      "common/internal/text_input_model.h",
      "common/json_message_codec.cc",
      "common/json_method_codec.cc",
    ]
    public += [
      "include/flutter_desktop_embedding/basic_message_channel.h",
      "include/flutter_desktop_embedding/binary_messenger.h",
      "include/flutter_desktop_embedding/engine_method_result.h",
      "include/flutter_desktop_embedding/fde_export.h",
      "include/flutter_desktop_embedding/json_message_codec.h",
      "include/flutter_desktop_embedding/json_method_codec.h",
      "include/flutter_desktop_embedding/message_codec.h",
      "include/flutter_desktop_embedding/method_call.h",
      "include/flutter_desktop_embedding/method_channel.h",
      "include/flutter_desktop_embedding/method_codec.h",
      "include/flutter_desktop_embedding/method_result.h",
      "include/flutter_desktop_embedding/plugin_registrar.h",
    ]
  }

  deps = [
    ":fetch_flutter_engine",
  ]

  defines = [ "FLUTTER_DESKTOP_EMBEDDING_IMPL" ]

  public_header_subdir = "flutter_desktop_embedding"

  public_configs = [ ":relative_public_headers" ]

  if (is_linux) {
    libs = [ "GL" ]

    deps += [ "//library/linux:publish_flutter_engine" ]

    configs += [
      "//build/linux/config:epoxy",
      "//build/linux/config:glfw3",
      "//build/linux/config:gtk3",
      "//build/linux/config:jsoncpp",
      "//build/linux/config:x11",
    ]
  }

  if (is_win) {
    deps += [
      "//library/windows:build_jsoncpp",
      "//library/windows:fetch_glfw",
      "//library/windows:publish_flutter_engine",
    ]

    libs = [ engine_files[2] ]

    public_configs += [
      "//library/windows:relative_glfw_dependencies",
      "//library/windows:relative_jsoncpp_dependencies",
    ]
  }
}

# Allows targets depending on this library to use library-style
# inculdes for its header rather than project-relative.
config("relative_public_headers") {
  include_dirs = [ "include" ]
}

# Allows targets depending on the engine library to use library-style
# inculdes for its header rather than project-relative.
config("relative_engine_headers") {
  include_dirs = [ "$engine_download_dir" ]
}

action("fetch_flutter_engine") {
  script = "//tools/dart_tools/bin/update_flutter_engine.dart"
  inputs = [
    "$flutter_tree_path/bin/internal/engine.version",
  ]
  outputs = engine_files
  args = [
    "--flutter_root=$flutter_tree_path",
    rebase_path(engine_download_dir, root_build_dir),
  ]
  public_configs = [ ":relative_engine_headers" ]
}
