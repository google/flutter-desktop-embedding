# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_wrapper_includes = [
  "include/flutter_desktop_embedding/basic_message_channel.h",
  "include/flutter_desktop_embedding/binary_messenger.h",
  "include/flutter_desktop_embedding/engine_method_result.h",
  "include/flutter_desktop_embedding/json_message_codec.h",
  "include/flutter_desktop_embedding/json_method_codec.h",
  "include/flutter_desktop_embedding/message_codec.h",
  "include/flutter_desktop_embedding/method_call.h",
  "include/flutter_desktop_embedding/method_channel.h",
  "include/flutter_desktop_embedding/method_codec.h",
  "include/flutter_desktop_embedding/method_result.h",
  "include/flutter_desktop_embedding/plugin_registrar.h",
]

# TODO: Re-evaluate this once more codecs are supported, since most libraries
# won't need all the codecs.
_wrapper_sources = [
  "src/engine_method_result.cc",
  "src/json_message_codec.cc",
  "src/json_method_codec.cc",
  "src/plugin_registrar.cc",
]

_wrapper_publish_dir = "$root_out_dir/fde_cpp_wrapper"

# Template for building the wrapper code in two different modes.
# This is needed because the implementation of the embedding library
# uses this code internally, in addition to it being published for
# client use, but the internal version needs to set the flag that
# controls the export macro.
template("client_wrapper") {
  template_target_name = target_name

  source_set(template_target_name) {
    forward_variables_from(invoker, "*")
  }

  source_set("${template_target_name}_internal") {
    forward_variables_from(invoker, "*")

    defines += [ "FLUTTER_DESKTOP_EMBEDDING_IMPL" ]
  }
}

# A static library version of the client wrapper, for use both within the
# framework implementation itself, as well as with the plugin builds.
client_wrapper("client_wrapper") {
  sources = _wrapper_sources
  public = _wrapper_includes

  # Use shared library settings since this target will be folded into shared
  # libraries.
  configs = default_dynamic_configs

  if (is_linux) {
    configs += [ "//build/linux/config:jsoncpp" ]
  }
  if (is_win) {
    deps = [
      "//third_party/jsoncpp:jsoncpp",
    ]
  }

  public_configs = [ ":_relative_headers" ]

  # Since these sources are for client use, they are written assuming they will
  # consume the embedder as a framework.
  include_dirs = [ "//library/include/" ]

  defines = [
    "USE_FDE_TREE_PATHS",
  ]
}

# Since this code is intended to be used by clients in a source bundle, the
# include paths use library-relative header paths rather than project-relative.
config("_relative_headers") {
  include_dirs = [ "include" ]
}

copy("_publish_includes") {
  sources = _wrapper_includes
  if (use_glfw) {
    sources +=
        [ "include/flutter_desktop_embedding/glfw/flutter_window_controller.h" ]
  }
  output_dir = "$_wrapper_publish_dir/include/flutter_desktop_embedding"
  outputs = [
    "$output_dir/{{source_file_part}}",
  ]
}

copy("_publish_sources") {
  sources = _wrapper_sources + [ "README" ]

  if (use_glfw) {
    sources += [ "src/glfw/flutter_window_controller.cc" ]
  }
  output_dir = "$_wrapper_publish_dir"
  outputs = [
    "$output_dir/{{source_file_part}}",
  ]
}

group("publish_wrapper") {
  deps = [
    ":_publish_includes",
    ":_publish_sources",
  ]
}
